---
heat_template_version: 2016-04-08

description: Deploy stack

parameters:
  dns_nameservers:
    type: json
    description: [ "8.8.8.8" ]

  # cidr subnet instances
  subnet_cidr:
    type: string
    default: 192.168.1.0/24

  # fixed ip router
  ip_admin_router:
    type: string
    default: 192.168.1.254
  ip_apps_router:
    type: string
    default: 192.168.1.1
  ip_services_router:
    type: string
    default: 192.168.1.253

  # routing table
  host_routes:
    type: json
    description: >
      routing table
      [ { "destination": "0.0.0.0/0", "nexthop": 192.168.1.1} ]
    default: []

  # FIP (admin,apps,services)
  fip_admin_net:
    type: string
  fip_apps_net:
    type: string
  fip_services_net:
    type: string
  # seed
  keypair_name:
    type: string
  keypair_public_key:
    type: string
  seed_image:
    type: string
  seed_flavor:
    type: string
  seed_vol_size:
    type: number
  seed_vol_type:
    type: string
  http_proxy:
    type: string
    default: ""
  no_proxy:
    type: string
    default: ""
  terraform_version:
    type: string
    default: "1.3.6"
  ansible_version:
    type: string
    default: "6.5.*"
  ssh_authorized_keys:
    type: json
    description: >
      format [
         { "user":"myuser1", "key":"ecdsa-sha2-nistp256...."},
         { "user":"myuser2", "key":"ecdsa-sha2-nistp256...."}
      ]
    default: []

resources:
  #
  # routers
  #
  router_admin:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_admin_net } }

  router_apps:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_apps_net } }

  router_services:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_services_net } }
  #
  # private network/subnet
  #
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      cidr: { get_param: subnet_cidr }
      dns_nameservers: { get_param: dns_nameservers }
      ip_version: 4
      enable_dhcp: true
      host_routes: { get_param: host_routes }
  #
  # router ports with fixed ip
  #
  port_admin:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_admin_router }

  port_apps:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_apps_router }

  port_services:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_services_router }
  #
  # router ports/interface mapping
  #
  interface_admin:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_admin }
      port: { get_resource: port_admin }
  interface_apps:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_apps }
      port: { get_resource: port_apps }
  interface_services:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_services }
      port: { get_resource: port_services }
#
# seed
#
  seed_keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: $keypair_name-$stack_name-$stack_id
          params:
            $keypair_name:
              get_param: keypair_name
            $stack_id:
              get_param: OS::stack_id
            $stack_name:
              get_param: OS::stack_name
      public_key: { get_param: keypair_public_key }

  seed_instance:
    type: OS::Nova::Server
    depends_on:
      - seed_root_vol
      - seed_keypair
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id: { get_resource: seed_root_vol }, delete_on_termination: "true" }]
      flavor: { get_param: seed_flavor }
      key_name: { get_resource: seed_keypair }
      networks:
        - port: { get_resource: seed_port }
      config_drive: true
      user_data_format: RAW
      user_data:
        get_resource: seed_userdata

  seed_userdata:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        preserve_hostname: true
        manage_etc_hosts: true
        write_files:
        - path: /home/debian/proxy.sh
          content:
            str_replace:
              template: |
                export http_proxy=$http_proxy
                export https_proxy=$http_proxy
                export no_proxy=$no_proxy
              params:
                $http_proxy: { get_param: http_proxy }
                $no_proxy: { get_param: no_proxy }
          owner: debian:debian
          permissions: "0755"
        - path: /root/launch.sh
          content:
            str_replace:
              template: |
                #!/bin/bash
                set -x -e -o pipefail
                export DEBIAN_FRONTEND=noninteractive
                # set proxy if defined
                if [ -n "$http_proxy" ]; then
                  export http_proxy=$http_proxy
                  export https_proxy=$http_proxy
                  export no_proxy=$no_proxy
                fi
                # Stop and disable apt-daily upgrade services;
                systemctl stop apt-daily.timer
                systemctl disable apt-daily.timer
                systemctl disable apt-daily.service
                systemctl stop apt-daily-upgrade.timer
                systemctl disable apt-daily-upgrade.timer
                systemctl disable apt-daily-upgrade.service
                apt-get -qy purge unattended-upgrades
                # install default package
                apt-get -qqy update
                apt-get -qy install curl git wget file sudo jq bzip2 unzip zip jq
                apt-get -qy install python-is-python3 pypy3 python3 python3-dev \
                    python3-pip python3-venv libpython3.9 python3-apt \
                    python3-openstackclient
                # install terraform
                export TERRAFORM_VERSION=$terraform_version
                export TERRAFORM_DOWNLOAD_URL=https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                export TERRAFORM_PACKAGE=$(basename $TERRAFORM_DOWNLOAD_URL)
                export TERRAFORM_NAME=terraform
                ( cd /tmp &&
                  curl -Ls -O ${TERRAFORM_DOWNLOAD_URL} \
                    && unzip -p "$TERRAFORM_PACKAGE" > $TERRAFORM_NAME \
                    && rm -rf "$TERRAFORM_PACKAGE" \
                    && chmod +x $TERRAFORM_NAME
                  sudo mv $TERRAFORM_NAME /usr/local/bin
                )
                # install pip requirements
                pip install 'ansible==$ansible_version' 'python-heatclient' 'python-octaviaclient'
                # check
                terraform version
                openstack --version
                ansible --version
                # Add authorized_keys to debian account
                (
                    HOME=/home/debian
                    if [ ! -d $HOME/.ssh ] ; then mkdir -p $HOME/.ssh ; fi
                    echo '$ssh_authorized_keys' |  jq -re ".[].key" >> $HOME/.ssh/authorized_keys
                    chown debian. -R $HOME/.ssh
                )
                # Create user account with ssh/authorized_keys
                (
                   echo '$ssh_authorized_keys' | \
                   jq -rce '.[]'|while read data ; do
                    user=$(echo "$data" |jq -re '.user')
                    useradd --badnames -k /etc/skel -m -s /bin/bash -U -G sudo $user
                    mkdir -p /home/$user/.ssh
                    echo "$data" |jq -re '.key' >> /home/$user/.ssh/authorized_keys
                    chown $user.$user /home/$user -R
                  done
                )
                # Allow sudo group to sudoers without password
                echo "%sudo ALL=(ALL:ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/00-sudo-users
              params:
                $http_proxy: { get_param: http_proxy }
                $no_proxy: { get_param: no_proxy }
                $terraform_version: { get_param: terraform_version }
                $ansible_version: { get_param: ansible_version }
                $ssh_authorized_keys: { get_param: ssh_authorized_keys }
          owner: root:root
          permissions: "0755"

        runcmd:
          - /root/launch.sh

  seed_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
      security_groups: [{ get_resource: seed_security_group }]
    depends_on:
      - interface_apps
      - interface_admin
      - interface_services

  seed_floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on:
      - seed_instance
    properties:
      floating_network: { get_param: fip_admin_net }
      port_id: { get_resource: seed_port }

  seed_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
  seed_root_vol:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: seed_vol_size }
      image: { get_param: seed_image }
      volume_type: { get_param: seed_vol_type }

outputs:
  router_admin_id:
    value: { get_resource: router_admin }
  router_apps_id:
    value: { get_resource: router_apps }
  router_services_id:
    value: { get_resource: router_services }

  net_id:
    description: network id
    value: { get_resource: network }
  subnet_id:
    description: subnet id
    value: { get_resource: subnet }

  seed_private_ip:
    description: seed private IP address
    value: { get_attr: [ seed_instance, first_address ] }
  seed_public_ip:
    description: seed public IP address
    value: { get_attr: [ seed_floating_ip, floating_ip_address ] }
  seed_instance_id:
    description: seed nova ressource id
    value: { get_resource: seed_instance }
  seed_port_id:
    description: seed port id
    value: { get_resource: seed_port }
  seed_security_group_id:
    description: seed security id
    value: { get_resource: seed_security_group }
  seed_root_vol_id:
    description: seed cinder volume id
    value: { get_resource: seed_root_vol }
  seed_floating_ip_id:
    description: seed floating ip id
    value: { get_resource: seed_floating_ip }
