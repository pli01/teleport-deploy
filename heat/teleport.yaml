---
heat_template_version: 2016-10-14

description: Deploy stack

parameters:
  dns_nameservers:
    type: json
    description: [ "8.8.8.8" ]

  # cidr subnet instances
  subnet_cidr:
    type: string
    default: 192.168.1.0/24

  # fixed ip router
  ip_admin_router:
    type: string
    default: 192.168.1.254
  ip_apps_router:
    type: string
    default: 192.168.1.1
  ip_services_router:
    type: string
    default: 192.168.1.253

  # routing table
  host_routes:
    type: json
    description: >
      routing table
      [ { "destination": "0.0.0.0/0", "nexthop": 192.168.1.1} ]
    default: []

  # FIP (admin,apps,services)
  fip_admin_net:
    type: string
  fip_apps_net:
    type: string
  fip_services_net:
    type: string
  # seed
  keypair_name:
    type: string
  keypair_public_key:
    type: string
  seed_image:
    type: string
  seed_flavor:
    type: string
  seed_vol_size:
    type: number
  seed_vol_type:
    type: string
  http_proxy:
    type: string
    default: ""
  no_proxy:
    type: string
    default: ""
  ssh_authorized_keys:
    type: json
    description: >
      format [
         { "user":"myuser1", "key":"ecdsa-sha2-nistp256...."},
         { "user":"myuser2", "key":"ecdsa-sha2-nistp256...."}
      ]
    default: []

  floating_ip_id:
    type: string
    default: ""
  floating_ip:
    type: string
    default: ""

  cloud_user:
    type: string
    default: debian
  docker_install_script:
    type: string
    default: ""
  teleport_install_script:
    type: string
    default: ""
  teleport_config:
    type: json
    description: >
      {
        "teleport_nodename": "teleport",
        "teleport_cluster_name": "teleport.mydomain.test",
        "teleport_external_hostname": "teleport.mydomain.test",
        "teleport_acme_email_domain": "teleport@mydomain.test",
        "teleport_node_labels": "env=test role=proxy",
      }

conditions:
  use_floating_ip_id: { equals: [{get_param: floating_ip_id}, ''] }

resources:
  #
  # routers
  #
  router_admin:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_admin_net } }

  router_apps:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_apps_net } }

  router_services:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_services_net } }
  #
  # private network/subnet
  #
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      cidr: { get_param: subnet_cidr }
      dns_nameservers: { get_param: dns_nameservers }
      ip_version: 4
      enable_dhcp: true
      host_routes: { get_param: host_routes }
  #
  # router ports with fixed ip
  #
  port_admin:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_admin_router }

  port_apps:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_apps_router }

  port_services:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_services_router }
  #
  # router ports/interface mapping
  #
  interface_admin:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_admin }
      port: { get_resource: port_admin }
  interface_apps:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_apps }
      port: { get_resource: port_apps }
  interface_services:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_services }
      port: { get_resource: port_services }
#
# seed
#
  seed_keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: $keypair_name-$stack_name-$stack_id
          params:
            $keypair_name:
              get_param: keypair_name
            $stack_id:
              get_param: OS::stack_id
            $stack_name:
              get_param: OS::stack_name
      public_key: { get_param: keypair_public_key }

  seed_instance:
    type: OS::Nova::Server
    depends_on:
      - seed_root_vol
      - seed_keypair
    properties:
      block_device_mapping: [{ device_name: "vda", volume_id: { get_resource: seed_root_vol }, delete_on_termination: "true" }]
      flavor: { get_param: seed_flavor }
      key_name: { get_resource: seed_keypair }
      networks:
        - port: { get_resource: seed_port }
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: seed_userdata

  seed_userdata:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: seed_cloud_config}
        - config: {get_resource: seed_config_script}
        - config: {get_resource: seed_install_default_script}
        - config: {get_resource: seed_install_teleport_script}

  seed_install_default_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
           params:
              $cloud_user: { get_param: cloud_user }
              $http_proxy: { get_param: http_proxy }
              $no_proxy: { get_param: no_proxy }
              $ssh_authorized_keys: { get_param: ssh_authorized_keys }
           template: |
              #!/bin/bash
              set -x -e -o pipefail
              echo "# RUNNING: $(dirname $0)/$(basename $0)"
              set -x
              set -e -o pipefail
              cloud_user=$cloud_user
              script_name=deploy-default.sh
              libdir=/home/$cloud_user
              [ -f ${libdir}/proxy.sh ] && source ${libdir}/proxy.sh
              [ -f ${libdir}/config.cfg ] && source ${libdir}/config.cfg
              echo "## deploy_default configuration"
              cat <<'EOF' > /home/$cloud_user/$script_name
              export DEBIAN_FRONTEND=noninteractive
              # set proxy if defined
              if [ -n "$http_proxy" ]; then
                export http_proxy=$http_proxy
                export https_proxy=$http_proxy
                export no_proxy=$no_proxy
              fi
              # Stop and disable apt-daily upgrade services;
              systemctl stop apt-daily.timer
              systemctl stop apt-daily.service
              systemctl disable apt-daily.timer
              systemctl disable apt-daily.service
              systemctl stop apt-daily-upgrade.timer
              systemctl disable apt-daily-upgrade.timer
              systemctl disable apt-daily-upgrade.service
              systemctl kill --kill-who=all apt-daily.service
              # wait until `apt-get updated` has been killed
              while ! (systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)')
              do
                sleep 1;
              done
              apt-get -qy purge unattended-upgrades
              # install default package
              apt-get -qqy update
              apt-get -qy install curl git wget file sudo jq bzip2 unzip zip jq ntp
              systemctl restart ntp
              apt-get -qy install python-is-python3 pypy3 python3 python3-dev \
                  python3-pip python3-venv libpython3.9 python3-apt
              # Add authorized_keys to debian account
              (
                  HOME=/home/debian
                  if [ ! -d $HOME/.ssh ] ; then mkdir -p $HOME/.ssh ; fi
                  echo '$ssh_authorized_keys' |  jq -re ".[].key" >> $HOME/.ssh/authorized_keys
                  chown debian. -R $HOME/.ssh
              )
              # Create user account with ssh/authorized_keys
              (
                 echo '$ssh_authorized_keys' | \
                 jq -rce '.[]'|while read data ; do
                  user=$(echo "$data" |jq -re '.user')
                  useradd --badnames -k /etc/skel -m -s /bin/bash -U -G sudo $user
                  mkdir -p /home/$user/.ssh
                  echo "$data" |jq -re '.key' >> /home/$user/.ssh/authorized_keys
                  chown $user.$user /home/$user -R
                done
              )
              # Allow sudo group to sudoers without password
              echo "%sudo ALL=(ALL:ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/00-sudo-users
              EOF
              echo "# run /home/$cloud_user/$script_name"
              chmod +x /home/$cloud_user/$script_name
              /home/$cloud_user/$script_name
              echo "## End post installation"

  seed_config_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
           params:
              $cloud_user: { get_param: cloud_user }
              $teleport_install_script: { get_param: teleport_install_script }
              $teleport_cluster_name: { get_param: [teleport_config, teleport_cluster_name] }
              $teleport_external_hostname: { get_param: [teleport_config, teleport_external_hostname] }
              $teleport_acme_email_domain: { get_param: [teleport_config, teleport_acme_email_domain] }
              $teleport_nodename: { get_param: [teleport_config, teleport_nodename] }
              $teleport_node_labels: { get_param: [teleport_config, teleport_node_labels] }
              $teleport_version: { get_param: [teleport_config, teleport_version] }
           template: |
              #!/bin/bash
              cloud_user=$cloud_user
              libdir=/home/$cloud_user
              cat <<'EOF' > ${libdir}/config.cfg
              export cloud_user=$cloud_user
              # teleport
              export TELEPORT_INSTALL_SCRIPT="$teleport_install_script"
              export TELEPORT_VERSION="$teleport_version"
              export LABELS="$teleport_node_labels"
              export TELEPORT_NODENAME="$teleport_nodename"
              export TELEPORT_CLUSTER_NAME="$teleport_cluster_name"
              export TELEPORT_EXTERNAL_HOSTNAME="$teleport_external_hostname"
              export TELEPORT_ACME_EMAIL_DOMAIN="$teleport_acme_email_domain"
              EOF

  seed_install_teleport_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
           params:
              $cloud_user: { get_param: cloud_user }
           template: |
              #!/bin/bash
              echo "# RUNNING: $(dirname $0)/$(basename $0)"
              set -x
              set -e -o pipefail
              cloud_user=$cloud_user
              script_name=deploy-teleport.sh
              libdir=/home/$cloud_user
              [ -f ${libdir}/proxy.sh ] && source ${libdir}/proxy.sh
              [ -f ${libdir}/config.cfg ] && source ${libdir}/config.cfg
              echo "## $deploy_teleport configuration"
              cat <<'EOF' > /home/$cloud_user/$script_name
              #!/bin/bash
              set -e -o pipefail
              cloud_user=$cloud_user
              libdir=/home/$cloud_user
              [ -f ${libdir}/proxy.sh ] && source ${libdir}/proxy.sh
              [ -f ${libdir}/config.cfg ] && source ${libdir}/config.cfg
              cd $libdir
              export TELEPORT_INSTALL_SCRIPT="${TELEPORT_INSTALL_SCRIPT:?Error TELEPORT_INSTALL_SCRIPT not found}"
              # if authenticated repo
              if [ -n "${GITHUB_TOKEN}" ] ; then
                curl_args=" -H \"Authorization: token ${GITHUB_TOKEN}\" "
              fi
              (
              eval curl -kL -s $curl_args ${TELEPORT_INSTALL_SCRIPT} | \
               bash
              ) || exit $?
              EOF
              echo "# run /home/$cloud_user/$script_name"
              chmod +x /home/$cloud_user/$script_name
              sudo  -E  bash -c /home/$cloud_user/$script_name
              echo "## End post installation"

  seed_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        preserve_hostname: true
        manage_etc_hosts: true
        write_files:
        - path: /home/debian/proxy.sh
          content:
            str_replace:
              template: |
                export http_proxy=$http_proxy
                export https_proxy=$http_proxy
                export no_proxy=$no_proxy
              params:
                $http_proxy: { get_param: http_proxy }
                $no_proxy: { get_param: no_proxy }
          owner: debian:debian
          permissions: "0755"

  seed_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
      security_groups: [{ get_resource: seed_security_group }]
    depends_on:
      - interface_apps
      - interface_admin
      - interface_services

  seed_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      port_id: { get_resource: seed_port }
      floatingip_id:
        if:
          - use_floating_ip_id
          - get_resource: seed_floating_ip
          - get_param: floating_ip_id

  seed_floating_ip:
    condition:  use_floating_ip_id
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: fip_admin_net }


  seed_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
  seed_root_vol:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: seed_vol_size }
      image: { get_param: seed_image }
      volume_type: { get_param: seed_vol_type }

outputs:
  router_admin_id:
    value: { get_resource: router_admin }
  router_apps_id:
    value: { get_resource: router_apps }
  router_services_id:
    value: { get_resource: router_services }

  net_id:
    description: network id
    value: { get_resource: network }
  subnet_id:
    description: subnet id
    value: { get_resource: subnet }

  seed_private_ip:
    description: seed private IP address
    value: { get_attr: [ seed_instance, first_address ] }
#  seed_public_ip:
#    description: seed public IP address
#    value: { get_attr: [ seed_floating_ip, floating_ip_address ] }
  seed_instance_id:
    description: seed nova ressource id
    value: { get_resource: seed_instance }
  seed_port_id:
    description: seed port id
    value: { get_resource: seed_port }
  seed_security_group_id:
    description: seed security id
    value: { get_resource: seed_security_group }
  seed_root_vol_id:
    description: seed cinder volume id
    value: { get_resource: seed_root_vol }
  seed_floating_ip_id:
    description: seed floating ip id
    value: { get_resource: seed_floating_ip }
