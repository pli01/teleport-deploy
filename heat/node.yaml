---
heat_template_version: 2016-04-08

description: Deploy stack

parameters:
  dns_nameservers:
    type: json
    description: [ "8.8.8.8" ]

  # cidr subnet instances
  subnet_cidr:
    type: string
    default: 192.168.1.0/24

  # fixed ip router
  ip_admin_router:
    type: string
    default: 192.168.1.254
  ip_apps_router:
    type: string
    default: 192.168.1.1
  ip_services_router:
    type: string
    default: 192.168.1.253

  # routing table
  host_routes:
    type: json
    description: >
      routing table
      [ { "destination": "0.0.0.0/0", "nexthop": 192.168.1.1} ]
    default: []

  # FIP (admin,apps,services)
  fip_admin_net:
    type: string
  fip_apps_net:
    type: string
  fip_services_net:
    type: string
  # seed
  keypair_name:
    type: string
  keypair_public_key:
    type: string
  seed_image:
    type: string
  seed_flavor:
    type: string
  seed_vol_size:
    type: number
  seed_vol_type:
    type: string
  http_proxy:
    type: string
    default: ""
  no_proxy:
    type: string
    default: ""
  ssh_authorized_keys:
    type: json
    description: >
      format [
         { "user":"myuser1", "key":"ecdsa-sha2-nistp256...."},
         { "user":"myuser2", "key":"ecdsa-sha2-nistp256...."}
      ]
    default: []
  target_hostname:
    type: string
  ca_pins:
    type: string
  teleport_args:
    type: string
  labels:
    type: string
  join_token:
    type: string

resources:
  #
  # routers
  #
  router_admin:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_admin_net } }

  router_apps:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_apps_net } }

  router_services:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { network: { get_param: fip_services_net } }
  #
  # private network/subnet
  #
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      cidr: { get_param: subnet_cidr }
      dns_nameservers: { get_param: dns_nameservers }
      ip_version: 4
      enable_dhcp: true
      host_routes: { get_param: host_routes }
  #
  # router ports with fixed ip
  #
  port_admin:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_admin_router }

  port_apps:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_apps_router }

  port_services:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
          ip_address: { get_param: ip_services_router }
  #
  # router ports/interface mapping
  #
  interface_admin:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_admin }
      port: { get_resource: port_admin }
  interface_apps:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_apps }
      port: { get_resource: port_apps }
  interface_services:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router_services }
      port: { get_resource: port_services }
#
# seed
#
  seed_keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: $keypair_name-$stack_name-$stack_id
          params:
            $keypair_name:
              get_param: keypair_name
            $stack_id:
              get_param: OS::stack_id
            $stack_name:
              get_param: OS::stack_name
      public_key: { get_param: keypair_public_key }

  seed_instance:
    type: OS::Nova::Server
    depends_on:
      - seed_root_vol
      - seed_keypair
    properties:
      name:
        str_replace:
          template: node-$stack_name-$stack_id
          params:
            $stack_id:
              get_param: OS::stack_id
            $stack_name:
              get_param: OS::stack_name
      block_device_mapping: [{ device_name: "vda", volume_id: { get_resource: seed_root_vol }, delete_on_termination: "true" }]
      flavor: { get_param: seed_flavor }
      key_name: { get_resource: seed_keypair }
      networks:
        - port: { get_resource: seed_port }
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: seed_userdata

  seed_userdata:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: seed_cloud_config}
        - config: {get_resource: seed_script}

  seed_script:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          params:
            $http_proxy: { get_param: http_proxy }
            $no_proxy: { get_param: no_proxy }
            $target_hostname: { get_param: target_hostname }
            $ca_pins: { get_param: ca_pins }
            $teleport_args: { get_param: teleport_args }
            $labels: { get_param: labels }
            $join_token: { get_param: join_token }
          template: |
             #!/bin/bash
             set -euo pipefail
             
             HOSTNAME="$(hostname -s)"
             MACHINE_ID="$(cat /etc/machine-id)"
             ALIVE_CHECK_DELAY=${ALIVE_CHECK_DELAY:-3}
             TELEPORT_VERSION=${TELEPORT_VERSION:-12.3.1}
             TELEPORT_PACKAGE_NAME="teleport=${TELEPORT_VERSION}"
             REPO_CHANNEL="${REPO_CHANNEL:-}"
             TARGET_HOSTNAME="$target_hostname"
             TARGET_PORT="${TARGET_PORT:-443}"
             JOIN_TOKEN="$join_token"
             CA_PINS="$ca_pins"
             # LABELS="env=test foo=bar"
             LABELS="$labels"
             TELEPORT_ARGS="$teleport_args"
             
             if [[ "${REPO_CHANNEL}" == "" ]]; then
                     # By default, use the current version's channel.
                     REPO_CHANNEL=stable/v"${TELEPORT_VERSION//.*/}"
             fi
             
             # install
             umask 0022
             apt-get -qy update
             apt-get -qy install apt-transport-https gnupg -y
             curl https://apt.releases.teleport.dev/gpg \
               -o /usr/share/keyrings/teleport-archive-keyring.asc
             source /etc/os-release
             echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] \
               https://apt.releases.teleport.dev/${ID?} ${VERSION_CODENAME?} ${REPO_CHANNEL}" \
               | tee /etc/apt/sources.list.d/teleport.list > /dev/null
             
             apt-get -qy update
             apt-get -qy install ${TELEPORT_PACKAGE_NAME}
             
             systemctl stop teleport.service || true
             
             # configure
             cat <<EOF | tee /etc/teleport.yaml
             version: v3
             teleport:
               nodename: ${HOSTNAME}
               data_dir: /var/lib/teleport
               join_params:
                 token_name: ${JOIN_TOKEN}
                 method: token
               proxy_server: ${TARGET_HOSTNAME}:${TARGET_PORT}
               log:
                 output: stderr
                 severity: INFO
                 format:
                   output: text
               ca_pin: ${CA_PINS}
               diag_addr: ""
             auth_service:
               enabled: "no"
             ssh_service:
               enabled: "yes"
               labels:
                 teleport.internal/resource-id: ${MACHINE_ID}
             $( for i in ${LABELS}; do
               KEY=${i%=*};
               VAL=${i#*=};
               echo "    $KEY:" "$VAL";
             done)
               commands:
               - name: hostname
                 command: [hostname]
                 period: 1m0s
             proxy_service:
               enabled: "no"
               https_keypairs: []
               https_keypairs_reload_interval: 0s
               acme: {}
             EOF
             
             # enable and start
             sed -i -e 's/^\(ExecStart=.*start\)/\1 $TELEPORT_ARGS /g'  /lib/systemd/system/teleport.service
             
             if [ ! -f "/etc/default/teleport" ] || ! grep "^TELEPORT_ARGS" /etc/default/teleport ; then
                echo "TELEPORT_ARGS=\"${TELEPORT_ARGS} \"" | tee /etc/default/teleport
                if [[ -n "$http_proxy" ]]; then
                   echo "HTTP_PROXY=\"$http_proxy\"" | tee -a /etc/default/teleport
                   echo "HTTPS_PROXY=\"$http_proxy\"" | tee -a /etc/default/teleport
                fi
                if [[ -n "$no_proxy" ]]; then
                   echo "NO_PROXY=\"$no_proxy\"" | tee -a /etc/default/teleport
                fi
             fi
             
             systemctl enable teleport
             systemctl start teleport
             sleep ${ALIVE_CHECK_DELAY}
             systemctl status teleport

  seed_cloud_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        merge_how: dict(recurse_array)+list(append)
        preserve_hostname: true
        manage_etc_hosts: true
        write_files:
        - path: /home/debian/proxy.sh
          content:
            str_replace:
              template: |
                export http_proxy=$http_proxy
                export https_proxy=$http_proxy
                export no_proxy=$no_proxy
              params:
                $http_proxy: { get_param: http_proxy }
                $no_proxy: { get_param: no_proxy }
          owner: debian:debian
          permissions: "0755"
        - path: /root/launch.sh
          content:
            str_replace:
              template: |
                #!/bin/bash
                set -x -e -o pipefail
                export DEBIAN_FRONTEND=noninteractive
                # set proxy if defined
                if [ -n "$http_proxy" ]; then
                  export http_proxy=$http_proxy
                  export https_proxy=$http_proxy
                  export no_proxy=$no_proxy
                fi
                # Stop and disable apt-daily upgrade services;
                systemctl stop apt-daily.timer
                systemctl disable apt-daily.timer
                systemctl disable apt-daily.service
                systemctl stop apt-daily-upgrade.timer
                systemctl disable apt-daily-upgrade.timer
                systemctl disable apt-daily-upgrade.service
                apt-get -qy purge unattended-upgrades
                # install default package
                apt-get -qqy update
                apt-get -qy install curl git wget file sudo jq bzip2 unzip zip jq ntp
                systemctl restart ntp
                apt-get -qy install python-is-python3 pypy3 python3 python3-dev \
                    python3-pip python3-venv libpython3.9 python3-apt
                # Add authorized_keys to debian account
                (
                    HOME=/home/debian
                    if [ ! -d $HOME/.ssh ] ; then mkdir -p $HOME/.ssh ; fi
                    echo '$ssh_authorized_keys' |  jq -re ".[].key" >> $HOME/.ssh/authorized_keys
                    chown debian. -R $HOME/.ssh
                )
                # Create user account with ssh/authorized_keys
                (
                   echo '$ssh_authorized_keys' | \
                   jq -rce '.[]'|while read data ; do
                    user=$(echo "$data" |jq -re '.user')
                    useradd --badnames -k /etc/skel -m -s /bin/bash -U -G sudo $user
                    mkdir -p /home/$user/.ssh
                    echo "$data" |jq -re '.key' >> /home/$user/.ssh/authorized_keys
                    chown $user.$user /home/$user -R
                  done
                )
                # Allow sudo group to sudoers without password
                echo "%sudo ALL=(ALL:ALL) NOPASSWD:ALL" | tee /etc/sudoers.d/00-sudo-users
              params:
                $http_proxy: { get_param: http_proxy }
                $no_proxy: { get_param: no_proxy }
                $ssh_authorized_keys: { get_param: ssh_authorized_keys }
          owner: root:root
          permissions: "0755"
        runcmd:
          - /root/launch.sh

  seed_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: network }
      fixed_ips:
        - subnet: { get_resource: subnet }
      security_groups: [{ get_resource: seed_security_group }]
    depends_on:
      - interface_apps
      - interface_admin
      - interface_services

  seed_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: seed_floating_ip }
      port_id: { get_resource: seed_port }

  seed_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: fip_admin_net }

  seed_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          direction: egress
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          direction: ingress
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
  seed_root_vol:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: seed_vol_size }
      image: { get_param: seed_image }
      volume_type: { get_param: seed_vol_type }

outputs:
  router_admin_id:
    value: { get_resource: router_admin }
  router_apps_id:
    value: { get_resource: router_apps }
  router_services_id:
    value: { get_resource: router_services }

  net_id:
    description: network id
    value: { get_resource: network }
  subnet_id:
    description: subnet id
    value: { get_resource: subnet }

  seed_private_ip:
    description: seed private IP address
    value: { get_attr: [ seed_instance, first_address ] }
  seed_public_ip:
    description: seed public IP address
    value: { get_attr: [ seed_floating_ip, floating_ip_address ] }
  seed_instance_id:
    description: seed nova ressource id
    value: { get_resource: seed_instance }
  seed_port_id:
    description: seed port id
    value: { get_resource: seed_port }
  seed_security_group_id:
    description: seed security id
    value: { get_resource: seed_security_group }
  seed_root_vol_id:
    description: seed cinder volume id
    value: { get_resource: seed_root_vol }
  seed_floating_ip_id:
    description: seed floating ip id
    value: { get_resource: seed_floating_ip }
